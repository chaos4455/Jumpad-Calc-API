# -*- coding: utf-8 -*-
"""
API RESTful Segura para Opera√ß√µes Matem√°ticas (Soma e M√©dia) com Autentica√ß√£o JWT e HTTPS

Este script Python implementa uma API RESTful robusta e segura utilizando FastAPI,
projetada para realizar opera√ß√µes matem√°ticas b√°sicas de soma e m√©dia sobre vetores
de n√∫meros inteiros. A API √© protegida por autentica√ß√£o JWT (JSON Web Tokens)
e utiliza HTTPS para garantir a seguran√ßa das comunica√ß√µes. Logs detalhados s√£o
gerados para monitoramento e depura√ß√£o, e um sistema de rate limiting ajuda a
prevenir abusos.

Recursos Principais:
    - Opera√ß√µes de soma e m√©dia de vetores de inteiros.
    - Seguran√ßa robusta com autentica√ß√£o JWT para endpoints protegidos (Admin e Tester).
    - Gera√ß√£o de tokens JWT para usu√°rios 'admin' e 'tester'.
    - Logs detalhados em JSON para rastreamento e auditoria, com formata√ß√£o colorida no console.
    - Valida√ß√£o de dados de entrada utilizando Pydantic.
    - Documenta√ß√£o interativa Swagger UI e ReDoc UI geradas automaticamente pelo FastAPI.
    - Configura√ß√£o flex√≠vel atrav√©s de vari√°veis de ambiente.
    - Gera√ß√£o autom√°tica de certificados autoassinados para HTTPS em ambiente de desenvolvimento.
    - Endpoint p√∫blico de sa√∫de para verifica√ß√£o do status da API.
    - CORS (Cross-Origin Resource Sharing) configur√°vel para permitir acesso de diferentes origens.

Para executar a API localmente (com HTTPS e gera√ß√£o de certificados autoassinados em desenvolvimento):
    1. Certifique-se de ter Python e pip instalados.
    2. Instale as depend√™ncias: `pip install fastapi uvicorn pydantic python-jose cryptography`.
    3. Execute o script: `python seu_script_api.py`.
    4. Acesse a documenta√ß√£o interativa em http://localhost:8882/docs ou http://localhost:8882/redoc.

Informa√ß√µes Adicionais:
    - Credenciais padr√£o para ADMIN: username 'admin', password 'admin'.
    - Credenciais padr√£o para TESTER: username 'tester', password 'tester'.
    - A API utiliza arquivos JSON simples para armazenar credenciais em ambiente de desenvolvimento.
      Em produ√ß√£o, recomenda-se o uso de um sistema de gerenciamento de usu√°rios e senhas mais robusto e seguro.

Criado por: Elias Andrade
Data de Cria√ß√£o: 10 de Mar√ßo de 2025
"""
import sys
import os

# Adiciona o diret√≥rio pai ao path do sistema para importar m√≥dulos de 'bibliotecas'
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Any

# Importa√ß√µes do FastAPI para cria√ß√£o da API
from fastapi import FastAPI, Request, HTTPException, Depends, status
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm

# Importa√ß√µes do Pydantic para valida√ß√£o de dados e modelos
from pydantic import BaseModel, ValidationError

# Importa√ß√µes do python-jose para JWT (JSON Web Tokens)
from jose import JWTError, jwt

# Importa√ß√µes da cryptography para gera√ß√£o de certificados HTTPS autoassinados
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

# Importa√ß√£o da biblioteca local para c√°lculos num√©ricos
from bibliotecas.calc_numbers import Numbers

# ‚öôÔ∏è Configura√ß√µes da API (vari√°veis de ambiente ou valores padr√£o)
SECRET_KEY = os.environ.get("API_SECRET_KEY", "Jump@d2025!!)") # üîë Chave secreta para JWT
ALGORITHM = os.environ.get("API_JWT_ALGORITHM", "HS256") # üîë Algoritmo JWT
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.environ.get("API_TOKEN_EXPIRY_MINUTES", "30")) # üîë Tempo de expira√ß√£o do token (minutos)
RATE_LIMIT_REQUESTS_PER_MINUTE = int(os.environ.get("API_RATE_LIMIT", "200")) # ‚ö†Ô∏è Limite de requisi√ß√µes por minuto (Rate Limiting)
DIRETORIO_LOGS = os.environ.get("API_LOG_DIR", "logs") # üóÇÔ∏è Diret√≥rio para arquivos de log
CREDENTIALS_DIR = os.environ.get("API_CREDENTIALS_DIR", "credentials") # üóÇÔ∏è Diret√≥rio para arquivos de credenciais e certificados
origins_permitidas = os.environ.get("API_CORS_ORIGINS", "http://localhost").split(",") # üåê Origens permitidas para CORS

# üîë Esquemas de seguran√ßa OAuth2 para tokens JWT
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token_admin") # üõ°Ô∏è Define esquema de seguran√ßa para token de admin (rota: /token_admin)
oauth2_scheme_tester = OAuth2PasswordBearer(tokenUrl="token_tester") # üõ°Ô∏è Define esquema de seguran√ßa para token de tester (rota: /token_tester)

# ü™µ Configura√ß√£o de Logging (logs coloridos no console e logs JSON em arquivos)
if not os.path.exists(DIRETORIO_LOGS): # üóÇÔ∏è Cria diret√≥rio de logs se n√£o existir
    os.makedirs(DIRETORIO_LOGS)
ARQUIVO_LOG_API = os.path.join(DIRETORIO_LOGS, "api-logs.json") # üìù Arquivo de log principal da API (JSON resumido)
ARQUIVO_LOG_DETALHADO_API = os.path.join(DIRETORIO_LOGS, "api-detailed-logs.json") # üìù Arquivo de log detalhado da API (JSON completo)

class FormatterColoridoSeguro(logging.Formatter): # ‚ú® Formatter para logs coloridos e com emojis no console
    """
    Formatter de log personalizado que adiciona cores e emojis aos logs exibidos no console.
    Melhora a legibilidade e destaca visualmente diferentes n√≠veis de log (DEBUG, INFO, WARNING, ERROR, CRITICAL).
    """
    CORES = { # Cores ANSI Escape Codes para diferentes n√≠veis de log
        'DEBUG': '\033[94m',    # Azul
        'INFO': '\033[92m',     # Verde
        'WARNING': '\033[93m',  # Amarelo
        'ERROR': '\033[91m',    # Vermelho
        'CRITICAL': '\033[97;41m', # Branco em fundo Vermelho
        'RESET': '\033[0m'      # Resetar cor para padr√£o
    }
    EMOJIS = { # Emojis para representar visualmente os n√≠veis de log
        'DEBUG': 'üêõ', # Bug/Debug
        'INFO': '‚úÖ',  # Checkmark/Sucesso
        'WARNING': '‚ö†Ô∏è', # Warning/Aviso
        'ERROR': 'üî•', # Fire/Erro
        'CRITICAL': 'üö®' # Alarm/Cr√≠tico
    }
    def format(self, record): # Formata o registro de log para o console
        """
        Formata um registro de log adicionando cores, emojis, timestamp e informa√ß√µes contextuais.

        Args:
            record (logging.LogRecord): O registro de log a ser formatado.

        Returns:
            str: A string formatada para ser exibida no console.
        """
        cor_log = self.CORES.get(record.levelname, self.CORES['INFO']) # Obt√©m a cor baseada no n√≠vel de log (levelname)
        reset_cor = self.CORES['RESET'] # C√≥digo para resetar a cor para o padr√£o
        emoji = self.EMOJIS.get(record.levelname, '') # Obt√©m o emoji correspondente ao n√≠vel de log
        nivel_log = f"{cor_log}{record.levelname}{reset_cor}" # Formata o n√≠vel de log com cor
        mensagem = f"{cor_log}{record.getMessage()}{reset_cor}" # Formata a mensagem de log com cor
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S") # Obt√©m o timestamp atual formatado
        return f"{timestamp} - {emoji} {nivel_log} - {record.name}:{record.lineno} - {mensagem}" # Retorna a string de log formatada

console_handler = logging.StreamHandler() # ‚úçÔ∏è Handler para logs no console (sa√≠da padr√£o)
console_handler.setFormatter(FormatterColoridoSeguro()) # Define o formatter colorido para o handler de console
api_log_handler = logging.FileHandler(ARQUIVO_LOG_API, encoding='utf-8') # ‚úçÔ∏è Handler para logs JSON resumidos em arquivo
api_log_formatter = logging.Formatter('{"timestamp": "%(asctime)s", "level": "%(levelname)s", "message": "%(message)s", "detalhes": %(log_record_json)s}') # Formatter JSON para logs resumidos
api_log_handler.setFormatter(api_log_formatter) # Define o formatter JSON para o handler de log resumido
api_detailed_log_handler = logging.FileHandler(ARQUIVO_LOG_DETALHADO_API, encoding='utf-8') # ‚úçÔ∏è Handler para logs JSON detalhados em arquivo
api_detailed_log_formatter = logging.Formatter('{"timestamp": "%(asctime)s", "level": "%(levelname)s", "name": "%(name)s", "line": "%(lineno)d", "message": "%(message)s", "record": %(log_record_json)s}') # Formatter JSON para logs detalhados
api_detailed_log_handler.setFormatter(api_detailed_log_formatter) # Define o formatter JSON para o handler de log detalhado

logger_app = logging.getLogger("api_server") # ü™µ Logger principal da aplica√ß√£o, nomeado 'api_server'
logger_app.setLevel(logging.DEBUG) # Define o n√≠vel de log para DEBUG (captura todos os n√≠veis)
logger_app.addHandler(console_handler) # Adiciona o handler de console para logs coloridos
logger_app.addHandler(api_log_handler) # Adiciona o handler para logs JSON resumidos em arquivo
logger_app.addHandler(api_detailed_log_handler) # Adiciona o handler para logs JSON detalhados em arquivo

# üöÄ Inicializa√ß√£o da Aplica√ß√£o FastAPI
app = FastAPI(
    title="API Matem√°tica Segura", # üè∑Ô∏è T√≠tulo da API (vis√≠vel na documenta√ß√£o)
    description="API RESTful para opera√ß√µes de soma e m√©dia - SEGURA (N√≠vel M√°ximo) com autentica√ß√£o JWT e HTTPS.", # üìù Descri√ß√£o da API
    version="0.9.3" # üìå Vers√£o da API
)

# ‚ÜîÔ∏è Configura√ß√£o de CORS (Cross-Origin Resource Sharing) - Ajuste 'origins_permitidas' conforme necess√°rio
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins_permitidas, # üåê Lista de origens permitidas a acessar a API
    allow_credentials=True, # üç™ Permite o envio de cookies em requisi√ß√µes cross-origin
    allow_methods=["*"], # ‚öôÔ∏è Permite todos os m√©todos HTTP (GET, POST, PUT, DELETE, OPTIONS, etc.)
    allow_headers=["*"], # ‚öôÔ∏è Permite todos os headers HTTP
)

# üõ°Ô∏è Modelos de Dados (Pydantic) para Valida√ß√£o e Documenta√ß√£o Autom√°tica

class NumerosEntrada(BaseModel): # üî¢ Modelo para validar e documentar a entrada de lista de n√∫meros
    """
    Modelo Pydantic para definir e validar a estrutura de entrada para opera√ß√µes que recebem uma lista de n√∫meros.
    Garante que a requisi√ß√£o contenha um campo 'numeros' com uma lista de inteiros.
    """
    numeros: List[int] # Campo 'numeros' esperado no corpo da requisi√ß√£o, deve ser uma lista de inteiros
    model_config = { # Configura√ß√£o extra para o modelo Pydantic
        "json_schema_extra": { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de payload para a documenta√ß√£o
                {"numeros": [1, 2, 3, 4]} # Exemplo de lista de n√∫meros v√°lida
            ]
        }
    }

class TokenRequest(BaseModel): # üîë Modelo para requisi√ß√£o de token JWT (username/password)
    """
    Modelo Pydantic para definir a estrutura de requisi√ß√£o para obten√ß√£o de token JWT.
    Espera campos 'username' e 'password' no corpo da requisi√ß√£o.
    """
    username: str # üë§ Campo 'username' para autentica√ß√£o
    password: str # üîë Campo 'password' para autentica√ß√£o

class TokenResponse(BaseModel): # üîë Modelo para resposta de token JWT (access_token, token_type, nivel_acesso)
    """
    Modelo Pydantic para definir a estrutura da resposta ao gerar um token JWT.
    Inclui o token de acesso, o tipo do token (bearer) e o n√≠vel de acesso do usu√°rio.
    """
    access_token: str # üîë Token JWT de acesso
    token_type: str # üè∑Ô∏è Tipo do token (sempre 'bearer' para JWT)
    nivel_acesso: str # üõ°Ô∏è N√≠vel de acesso do usu√°rio associado ao token (e.g., 'admin', 'tester')
    model_config = { # Configura√ß√£o extra para o modelo Pydantic
        "json_schema_extra": { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de resposta para a documenta√ß√£o
                {"access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", "token_type": "bearer", "nivel_acesso": "admin"} # Exemplo de token JWT
            ]
        }
    }

class SomaResponse(BaseModel): # ‚ûï Modelo para resposta da rota /somar (resultado, mensagem, etc.)
    """
    Modelo Pydantic para definir a estrutura da resposta da rota '/somar'.
    Inclui o resultado da soma, uma mensagem de sucesso, os n√∫meros de entrada e informa√ß√µes do usu√°rio (opcional).
    """
    resultado: int # ‚ûï Resultado da opera√ß√£o de soma
    mensagem: str # üí¨ Mensagem informativa sobre a opera√ß√£o
    numeros_entrada: List[int] # üî¢ Lista de n√∫meros de entrada que foram somados
    usuario: Optional[str] = None # üë§ Nome de usu√°rio associado √† requisi√ß√£o (opcional)
    nivel_acesso: Optional[str] = None # üõ°Ô∏è N√≠vel de acesso do usu√°rio (opcional)
    class Config: # Configura√ß√£o extra para o modelo Pydantic
        json_schema_extra = { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de resposta para a documenta√ß√£o
                {"resultado": 10, "mensagem": "Opera√ß√£o de soma bem-sucedida", "numeros_entrada": [1, 2, 3, 4], "usuario": "admin", "nivel_acesso": "admin"} # Exemplo de resposta da soma
            ]
        }

class MediaResponse(BaseModel): # ‚ûó Modelo para resposta da rota /calcular_media (media, mensagem, etc.)
    """
    Modelo Pydantic para definir a estrutura da resposta da rota '/calcular_media'.
    Inclui a m√©dia calculada, uma mensagem de sucesso, os n√∫meros de entrada e informa√ß√µes do usu√°rio (opcional).
    """
    media: Optional[float] = None # ‚ûó Resultado da opera√ß√£o de m√©dia (pode ser None se a lista de entrada for vazia)
    mensagem: str # üí¨ Mensagem informativa sobre a opera√ß√£o
    numeros_entrada: List[int] # üî¢ Lista de n√∫meros de entrada para o c√°lculo da m√©dia
    usuario: Optional[str] = None # üë§ Nome de usu√°rio associado √† requisi√ß√£o (opcional)
    nivel_acesso: Optional[str] = None # üõ°Ô∏è N√≠vel de acesso do usu√°rio (opcional)
    class Config: # Configura√ß√£o extra para o modelo Pydantic
        json_schema_extra = { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de resposta para a documenta√ß√£o
                {"media": 2.5, "mensagem": "Opera√ß√£o de m√©dia bem-sucedida", "numeros_entrada": [1, 2, 3, 4], "usuario": "admin", "nivel_acesso": "admin"} # Exemplo de resposta da m√©dia
            ]
        }

class SaudeResponse(BaseModel): # ü©∫ Modelo para resposta da rota /saude (status, mensagem)
    """
    Modelo Pydantic para definir a estrutura da resposta da rota '/saude'.
    Indica o status da API e uma mensagem geral de sa√∫de.
    """
    status: str # ü©∫ Status geral da API ('OK' para saud√°vel)
    mensagem: str # üí¨ Mensagem informativa sobre o status da API
    class Config: # Configura√ß√£o extra para o modelo Pydantic
        json_schema_extra = { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de resposta para a documenta√ß√£o
                {"status": "OK", "mensagem": "API est√° saud√°vel e SEGURA"} # Exemplo de resposta de sa√∫de
            ]
        }

class ErrorResponse(BaseModel): # ‚ùå Modelo para respostas de erro padronizadas (erro, detalhes)
    """
    Modelo Pydantic para definir a estrutura de respostas de erro padronizadas na API.
    Inclui uma mensagem de erro geral e detalhes adicionais sobre o erro.
    """
    erro: str # ‚ùå Mensagem de erro geral
    detalhes: Any # ‚ÑπÔ∏è Detalhes adicionais sobre o erro (pode ser qualquer tipo de dado)
    class Config: # Configura√ß√£o extra para o modelo Pydantic
        json_schema_extra = { # Informa√ß√µes extras para o schema JSON (documenta√ß√£o Swagger/ReDoc)
            "examples": [ # Exemplos de resposta para a documenta√ß√£o
                {"erro": "Erro de valida√ß√£o nos dados de entrada", "detalhes": "A lista de n√∫meros n√£o pode estar vazia."} # Exemplo de resposta de erro
            ]
        }

# üîë Fun√ß√µes de Seguran√ßa (JWT - JSON Web Tokens)

def gerar_token_jwt(data: dict, expires_delta: Optional[timedelta] = None) -> str: # üîë Gera token JWT
    """
    Gera um token JWT (JSON Web Token) seguro.

    Args:
        data (dict): Dados a serem inclu√≠dos no payload do token (e.g., informa√ß√µes do usu√°rio).
        expires_delta (Optional[timedelta]): Tempo de expira√ß√£o do token (opcional, se n√£o fornecido, o token n√£o expira).

    Returns:
        str: O token JWT codificado como uma string.
    """
    to_encode = data.copy() # Cria uma c√≥pia dos dados para evitar modifica√ß√µes no original
    if expires_delta: # Se um tempo de expira√ß√£o for fornecido
        expire = datetime.utcnow() + expires_delta # Calcula o tempo de expira√ß√£o a partir de agora
        to_encode.update({"exp": expire}) # Adiciona a chave 'exp' (expiration time) ao payload do token
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM) # Codifica o payload em um JWT usando a chave secreta e o algoritmo especificado
    return encoded_jwt # Retorna o token JWT codificado

def verificar_token_jwt(token: str) -> Optional[dict]: # ‚úÖ Verifica e decodifica token JWT
    """
    Verifica e decodifica um token JWT.

    Args:
        token (str): O token JWT a ser verificado e decodificado.

    Returns:
        Optional[dict]: O payload do token JWT decodificado como um dicion√°rio, se a verifica√ß√£o for bem-sucedida.
                       Retorna None se o token for inv√°lido ou expirado (JWTError).
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM]) # Decodifica o token JWT usando a chave secreta e os algoritmos permitidos
        return payload # Retorna o payload decodificado (dicion√°rio com informa√ß√µes do token)
    except JWTError: # Captura exce√ß√µes se o token for inv√°lido, expirado ou a assinatura for inv√°lida
        return None # Retorna None indicando que a verifica√ß√£o do token falhou

async def obter_usuario_atual_jwt(token: str = Depends(oauth2_scheme)) -> dict: # üõ°Ô∏è Depend√™ncia para obter usu√°rio ADMIN atual via JWT
    """
    Depend√™ncia do FastAPI para obter o usu√°rio atual (ADMIN) a partir do token JWT.
    Verifica a validade do token JWT fornecido e retorna o payload do token se v√°lido.
    Se o token for inv√°lido ou ausente, levanta uma exce√ß√£o HTTPException 401 (N√£o Autorizado).

    Args:
        token (str, optional): O token JWT a ser verificado, injetado pelo FastAPI atrav√©s do esquema de seguran√ßa 'oauth2_scheme'.
                               Defaults to Depends(oauth2_scheme).

    Returns:
        dict: O payload do token JWT decodificado, contendo informa√ß√µes do usu√°rio ADMIN.

    Raises:
        HTTPException: 401 UNAUTHORIZED - Se o token JWT for inv√°lido, expirado ou ausente.
    """
    logger_app.debug(f"üîí Validando Token JWT (ADMIN): {token[:10]}...", extra={'log_record_json': {"token_prefix": token[:10]}}) # ü™µ Log de debug: valida√ß√£o de token ADMIN iniciada
    payload = verificar_token_jwt(token) # ‚úÖ Verifica o token JWT usando a fun√ß√£o 'verificar_token_jwt'
    if payload is None: # Se a verifica√ß√£o do token falhar (token inv√°lido ou expirado)
        logger_app.warning("‚ö†Ô∏è Token JWT inv√°lido ou expirado (ADMIN). Acesso negado.", extra={'log_record_json': {"status_auth": "falha_token_invalido_admin"}}) # ü™µ Log de warning: token ADMIN inv√°lido
        raise HTTPException( # Levanta uma exce√ß√£o HTTP 401 (N√£o Autorizado)
            status_code=status.HTTP_401_UNAUTHORIZED, # C√≥digo de status HTTP 401
            detail="Credenciais inv√°lidas. Token JWT ausente, inv√°lido ou expirado.", # Mensagem de detalhe do erro
            headers={"WWW-Authenticate": "Bearer"}, # Header para indicar o tipo de autentica√ß√£o esperada (Bearer)
        )
    return payload # Retorna o payload do token decodificado (informa√ß√µes do usu√°rio ADMIN)

async def obter_usuario_tester_jwt(token: str = Depends(oauth2_scheme_tester)) -> dict: # üõ°Ô∏è Depend√™ncia para obter usu√°rio TESTER atual via JWT
    """
    Depend√™ncia do FastAPI para obter o usu√°rio atual (TESTER) a partir do token JWT.
    Similar a 'obter_usuario_atual_jwt', mas utiliza o esquema de seguran√ßa 'oauth2_scheme_tester' para tokens de tester.
    Verifica a validade do token JWT de tester fornecido e retorna o payload se v√°lido.
    Se o token for inv√°lido ou ausente, levanta uma exce√ß√£o HTTPException 401 (N√£o Autorizado).

    Args:
        token (str, optional): O token JWT de tester a ser verificado, injetado pelo FastAPI atrav√©s do esquema de seguran√ßa 'oauth2_scheme_tester'.
                               Defaults to Depends(oauth2_scheme_tester).

    Returns:
        dict: O payload do token JWT de tester decodificado, contendo informa√ß√µes do usu√°rio TESTER.

    Raises:
        HTTPException: 401 UNAUTHORIZED - Se o token JWT de tester for inv√°lido, expirado ou ausente.
    """
    logger_app.debug(f"üîí Validando Token JWT (TESTER): {token[:10]}...", extra={'log_record_json':  {"token_prefix": token[:10]}}) # ü™µ Log de debug: valida√ß√£o de token TESTER iniciada
    payload = verificar_token_jwt(token) # ‚úÖ Verifica o token JWT usando a fun√ß√£o 'verificar_token_jwt'
    if payload is None: # Se a verifica√ß√£o do token falhar (token inv√°lido ou expirado)
        logger_app.warning("‚ö†Ô∏è Token JWT inv√°lido ou expirado (TESTER). Acesso negado.", extra={'log_record_json': {"status_auth": "falha_token_invalido_tester"}}) # ü™µ Log de warning: token TESTER inv√°lido
        raise HTTPException( # Levanta uma exce√ß√£o HTTP 401 (N√£o Autorizado)
            status_code=status.HTTP_401_UNAUTHORIZED, # C√≥digo de status HTTP 401
            detail="Credenciais inv√°lidas. Token JWT de tester ausente, inv√°lido ou expirado.", # Mensagem de detalhe do erro (espec√≠fica para tester)
            headers={"WWW-Authenticate": "Bearer"}, # Header para indicar o tipo de autentica√ß√£o esperada (Bearer)
        )
    return payload # Retorna o payload do token decodificado (informa√ß√µes do usu√°rio TESTER)

# üîë Endpoints de Autentica√ß√£o Segura (JWT)

@app.post("/token_admin", tags=["autentica√ß√£o_segura"], response_model=TokenResponse, summary="Gera token JWT seguro para Administradores", description="Endpoint para gerar um token JWT de acesso com n√≠vel 'admin'. Requer credenciais de administrador.")
async def gerar_token_admin_seguro(token_request: TokenRequest): # üîë Rota para gerar token JWT de ADMIN (/token_admin)
    """
    Endpoint para gerar um token JWT (JSON Web Token) para usu√°rios com n√≠vel de acesso 'admin'.
    Utiliza credenciais fixas (username/password) armazenadas em um arquivo JSON para fins de demonstra√ß√£o.
    Em um sistema de produ√ß√£o, as credenciais seriam verificadas contra um banco de dados ou sistema de autentica√ß√£o mais robusto.

    Args:
        token_request (TokenRequest): Objeto Pydantic contendo 'username' e 'password' para a requisi√ß√£o de token.

    Returns:
        TokenResponse: Objeto Pydantic contendo o 'access_token' JWT, 'token_type' (bearer) e 'nivel_acesso' ('admin').

    Raises:
        HTTPException:
            - 401 UNAUTHORIZED: Se as credenciais de administrador fornecidas estiverem incorretas.
            - 500 INTERNAL_SERVER_ERROR: Se ocorrer um erro ao ler o arquivo de credenciais (e.g., arquivo n√£o encontrado, erro de JSON).
    """
    logger_app.info(f"üîë Requisi√ß√£o para gerar token JWT (ADMIN) recebida para usu√°rio: '{token_request.username}'", extra={'log_record_json': {"username": token_request.username}}) # ü™µ Log de info: requisi√ß√£o para token ADMIN recebida
    ADMIN_CREDENTIALS_FILE = os.path.join(CREDENTIALS_DIR, "admin_credentials.json") # üóÇÔ∏è Caminho para o arquivo de credenciais de admin

    try: # Tenta ler as credenciais do arquivo JSON
        with open(ADMIN_CREDENTIALS_FILE, "r", encoding='utf-8') as f: # Abre o arquivo em modo leitura com encoding UTF-8
            usuario_admin = json.load(f) # Carrega o conte√∫do JSON do arquivo para a vari√°vel 'usuario_admin'
    except FileNotFoundError: # Captura exce√ß√£o se o arquivo de credenciais n√£o for encontrado
        logger_app.critical(f"üí• Arquivo de credenciais admin n√£o encontrado: '{ADMIN_CREDENTIALS_FILE}'.", extra={'log_record_json': {"erro": "FileNotFoundError", "arquivo": ADMIN_CREDENTIALS_FILE}}) # ü™µ Log cr√≠tico: arquivo de credenciais ADMIN n√£o encontrado
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Erro interno: Arquivo de credenciais n√£o encontrado.") # Levanta exce√ß√£o HTTP 500
    except json.JSONDecodeError as e: # Captura exce√ß√£o se houver erro ao decodificar o JSON
        logger_app.critical(f"üí• Erro ao decodificar JSON do arquivo de credenciais: '{ADMIN_CREDENTIALS_FILE}'. Detalhes: {e}", extra={'log_record_json': {"erro": "JSONDecodeError", "arquivo": ADMIN_CREDENTIALS_FILE, "detalhe_erro": str(e)}}) # ü™µ Log cr√≠tico: erro ao decodificar JSON de credenciais ADMIN
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Erro interno: Falha ao ler arquivo de credenciais.") # Levanta exce√ß√£o HTTP 500

    if token_request.username == usuario_admin["username"] and token_request.password == usuario_admin["password"]: # ‚úÖ Verifica username e password com as credenciais lidas
        tempo_expiracao_token = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES) # Define o tempo de expira√ß√£o do token
        token_jwt = gerar_token_jwt(data={"sub": token_request.username, "nivel_acesso": "admin"}, expires_delta=tempo_expiracao_token) # üîë Gera o token JWT para admin
        logger_app.info(f"üîë Token JWT (ADMIN) gerado com sucesso para usu√°rio 'admin'. Expira em {ACCESS_TOKEN_EXPIRE_MINUTES} minutos.", extra={'log_record_json': {"usuario": "admin", "expira_em_minutos": ACCESS_TOKEN_EXPIRE_MINUTES}}) # ü™µ Log de info: token ADMIN gerado com sucesso
        return {"access_token": token_jwt, "token_type": "bearer", "nivel_acesso": "admin"} # Retorna a resposta com o token JWT
    else: # Se as credenciais forem inv√°lidas
        logger_app.warning(f"‚ö†Ô∏è Falha na autentica√ß√£o (ADMIN) para usu√°rio '{token_request.username}'. Credenciais inv√°lidas.", extra={'log_record_json': {"username": token_request.username}}) # ü™µ Log de warning: falha na autentica√ß√£o ADMIN
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Credenciais de administrador incorretas.") # Levanta exce√ß√£o HTTP 401

@app.post("/token_tester", tags=["autentica√ß√£o_segura_tester"], response_model=TokenResponse, summary="Gera token JWT seguro para Testers", description="Endpoint para gerar um token JWT de acesso com n√≠vel 'tester'. Requer credenciais de tester.")
async def gerar_token_seguro_tester(form_data: OAuth2PasswordRequestForm = Depends()): # üîë Rota para gerar token JWT de TESTER (/token_tester)
    """
    Endpoint para gerar um token JWT (JSON Web Token) para usu√°rios com n√≠vel de acesso 'tester'.
    Similar ao endpoint '/token_admin', mas utiliza credenciais de 'tester' e define o n√≠vel de acesso como 'tester'.
    Utiliza credenciais fixas (username/password) armazenadas em um arquivo JSON para fins de demonstra√ß√£o.

    Args:
        form_data (OAuth2PasswordRequestForm): Formul√°rio de requisi√ß√£o OAuth2 contendo 'username' e 'password' para a requisi√ß√£o de token.
                                                 Injetado pelo FastAPI atrav√©s de Depends(OAuth2PasswordRequestForm).

    Returns:
        TokenResponse: Objeto Pydantic contendo o 'access_token' JWT, 'token_type' (bearer) e 'nivel_acesso' ('tester').

    Raises:
        HTTPException:
            - 401 UNAUTHORIZED: Se as credenciais de tester fornecidas estiverem incorretas.
            - 500 INTERNAL_SERVER_ERROR: Se ocorrer um erro ao ler o arquivo de credenciais de tester.
    """
    logger_app.info(f"üîë Requisi√ß√£o para gerar token JWT (TESTER) recebida para usu√°rio: '{form_data.username}'", extra={'log_record_json': {"username": form_data.username}}) # ü™µ Log de info: requisi√ß√£o para token TESTER recebida
    TESTER_CREDENTIALS_FILE = os.path.join(CREDENTIALS_DIR, "tester_credentials.json") # üóÇÔ∏è Caminho para o arquivo de credenciais de tester

    try: # Tenta ler as credenciais do arquivo JSON
        with open(TESTER_CREDENTIALS_FILE, "r", encoding='utf-8') as f: # Abre o arquivo em modo leitura com encoding UTF-8
            usuario_tester = json.load(f) # Carrega o conte√∫do JSON do arquivo para a vari√°vel 'usuario_tester'
    except FileNotFoundError: # Captura exce√ß√£o se o arquivo de credenciais n√£o for encontrado
        logger_app.critical(f"üí• Arquivo de credenciais tester n√£o encontrado: '{TESTER_CREDENTIALS_FILE}'.", extra={'log_record_json': {"erro": "FileNotFoundError", "arquivo": TESTER_CREDENTIALS_FILE}}) # ü™µ Log cr√≠tico: arquivo de credenciais TESTER n√£o encontrado
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Erro interno: Arquivo de credenciais de tester n√£o encontrado.") # Levanta exce√ß√£o HTTP 500
    except json.JSONDecodeError as e: # Captura exce√ß√£o se houver erro ao decodificar o JSON
        logger_app.critical(f"üí• Erro ao decodificar JSON do arquivo de credenciais tester: '{TESTER_CREDENTIALS_FILE}'. Detalhes: {e}", extra={'log_record_json': {"erro": "JSONDecodeError", "arquivo": TESTER_CREDENTIALS_FILE, "detalhe_erro": str(e)}}) # ü™µ Log cr√≠tico: erro ao decodificar JSON de credenciais TESTER
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Erro interno: Falha ao ler arquivo de credenciais de tester.") # Levanta exce√ß√£o HTTP 500

    if form_data.username == usuario_tester["username"] and form_data.password == usuario_tester["password"]: # ‚úÖ Verifica username e password com as credenciais lidas
        tempo_expiracao_token = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES) # Define o tempo de expira√ß√£o do token
        token_jwt = gerar_token_jwt(data={"sub": form_data.username, "nivel_acesso": "tester"}, expires_delta=tempo_expiracao_token) # üîë Gera o token JWT para tester
        logger_app.info(f"üîë Token JWT (TESTER) gerado com sucesso para usu√°rio 'tester'. Expira em {ACCESS_TOKEN_EXPIRE_MINUTES} minutos.", extra={'log_record_json': {"usuario": "tester", "expira_em_minutos": ACCESS_TOKEN_EXPIRE_MINUTES}}) # ü™µ Log de info: token TESTER gerado com sucesso
        return {"access_token": token_jwt, "token_type": "bearer", "nivel_acesso": "tester"} # Retorna a resposta com o token JWT
    else: # Se as credenciais forem inv√°lidas
        logger_app.warning(f"‚ö†Ô∏è Requisi√ß√£o para /token_tester com credenciais de tester inv√°lidas (IGNORADO para testes API).", extra={'log_record_json': {"username": form_data.username}}) # ü™µ Log de warning: requisi√ß√£o para token TESTER com credenciais inv√°lidas (ignorado para testes)
        return {"access_token": "TOKEN_INVALIDO_PARA_TESTE", "token_type": "bearer", "nivel_acesso": "tester"} # Retorna um token inv√°lido para testes (para fins de teste da API)

# ‚ûï Endpoints de Opera√ß√µes Matem√°ticas (PROTEGIDOS por JWT)

@app.post("/somar", tags=["matem√°tica_segura"], summary="Soma um vetor de n√∫meros inteiros", description="Endpoint PROTEGIDO que realiza a soma de uma lista de n√∫meros inteiros fornecida no corpo da requisi√ß√£o. Requer token JWT de administrador v√°lido.", dependencies=[Depends(obter_usuario_atual_jwt)], response_model=SomaResponse, response_class=JSONResponse)
async def somar_vetor(request: Request, numeros_entrada: NumerosEntrada, usuario: dict = Depends(obter_usuario_atual_jwt)): # ‚ûï Rota para somar vetor (PROTEGIDA) - /somar
    """
    Endpoint protegido para somar uma lista de n√∫meros inteiros.
    Requer um token JWT v√°lido de administrador para ser acessado.

    Args:
        request (Request): Objeto Request do FastAPI para informa√ß√µes sobre a requisi√ß√£o.
        numeros_entrada (NumerosEntrada): Objeto Pydantic contendo a lista de n√∫meros a serem somados no campo 'numeros'.
        usuario (dict): Payload do token JWT do usu√°rio autenticado, injetado pela depend√™ncia 'obter_usuario_atual_jwt'.

    Returns:
        SomaResponse: Objeto Pydantic contendo o resultado da soma, mensagem de sucesso e informa√ß√µes da requisi√ß√£o.

    Raises:
        HTTPException:
            - 422 UNPROCESSABLE_ENTITY: Se houver erro de valida√ß√£o nos dados de entrada (e.g., lista de n√∫meros inv√°lida).
            - 400 BAD_REQUEST: Se houver erro de tipo de dados na biblioteca de c√°lculo (calc_numbers).
            - 500 INTERNAL_SERVER_ERROR: Em caso de erro interno no servidor.
    """
    detalhes_requisicao = f"Cliente: {request.client.host if request.client else 'desconhecido'}, URL: {request.url.path}, Usu√°rio JWT (ADMIN): {usuario.get('sub') if usuario else 'desconhecido'}, N√≠vel Acesso: {usuario.get('nivel_acesso') if usuario else 'desconhecido'}, HTTPS={request.url.scheme == 'https'}, Rate Limited=SIM" # ‚ÑπÔ∏è Detalhes da requisi√ß√£o para logs
    logger_app.info(f"‚û°Ô∏è  Requisi√ß√£o POST em '/somar' (PROTEGIDO) de {detalhes_requisicao}", extra={'log_record_json': {}}) # ü™µ Log de info: requisi√ß√£o POST para '/somar' recebida

    try: # Tenta executar a opera√ß√£o de soma
        lista_numeros = numeros_entrada.numeros # üî¢ Extrai a lista de n√∫meros do objeto Pydantic de entrada
        logger_app.debug(f"üì¶ Corpo da requisi√ß√£o JSON recebido e VALIDADO (Pydantic): {lista_numeros}", extra={'log_record_json': {"numeros_entrada": lista_numeros}}) # ü™µ Log de debug: corpo da requisi√ß√£o validado

        instancia_numeros = Numbers() # ‚ûï Instancia a classe Numbers da biblioteca 'bibliotecas.calc_numbers'
        resultado_soma = instancia_numeros.sum_numbers(lista_numeros) # ‚ûï Chama a fun√ß√£o 'sum_numbers' para realizar a soma

        conteudo_resposta = {"resultado": resultado_soma, "mensagem": "Opera√ß√£o de soma bem-sucedida", "numeros_entrada": lista_numeros, "usuario": usuario.get('sub'), "nivel_acesso": usuario.get('nivel_acesso')} # üí¨ Monta o conte√∫do da resposta
        logger_app.info(f"‚ûï Opera√ß√£o de soma bem-sucedida. Resultado: {resultado_soma} - {detalhes_requisicao}", extra={'log_record_json': {"resultado_soma": resultado_soma, "usuario": usuario.get('sub'), "nivel_acesso": usuario.get('nivel_acesso')}}) # ü™µ Log de info: opera√ß√£o de soma bem-sucedida
        return conteudo_resposta # Retorna a resposta com o resultado da soma

    except ValueError as e_calc_value: # Captura exce√ß√£o ValueError da biblioteca de c√°lculo (e.g., lista vazia)
        logger_app.warning(f"‚ö†Ô∏è Erro de valida√ß√£o nos dados de entrada para '/somar': {e_calc_value} - {detalhes_requisicao}", extra={'log_record_json': {"erro_biblioteca": str(e_calc_value)}}) # ü™µ Log de warning: erro de valida√ß√£o na entrada para '/somar'
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=str(e_calc_value)) # Levanta exce√ß√£o HTTP 422
    except TypeError as e_calc_type: # Captura exce√ß√£o TypeError da biblioteca de c√°lculo (e.g., tipo de dado incorreto)
        logger_app.error(f"üî• Erro de tipo de dados na biblioteca calc_numbers para '/somar': {e_calc_type} - {detalhes_requisicao}", extra={'log_record_json': {"erro_biblioteca": str(e_calc_type)}}) # ü™µ Log de error: erro de tipo de dados na biblioteca para '/somar'
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e_calc_type)) # Levanta exce√ß√£o HTTP 400
    except HTTPException as exc_http: # Captura exce√ß√µes HTTPException levantadas explicitamente no c√≥digo
        logger_app.error(f"üî• Exce√ß√£o HTTP: {exc_http.detail} - Status Code: {exc_http.status_code} - {detalhes_requisicao}", extra={'log_record_json': {"erro_http": exc_http.detail, "status_code": exc_http.status_code}}) # ü™µ Log de error: exce√ß√£o HTTP capturada
        raise JSONResponse(status_code=exc_http.status_code, content={"erro": exc_http.detail}) # Retorna resposta JSON com erro HTTP
    except ValidationError as ve: # Captura exce√ß√µes ValidationError do Pydantic (erros de valida√ß√£o do modelo)
        logger_app.warning(f"‚ö†Ô∏è Erro de Valida√ß√£o de Entrada (Pydantic): {ve.errors()} - {detalhes_requisicao}", extra={'log_record_json': {"erro_validacao": ve.errors()}}) # ü™µ Log de warning: erro de valida√ß√£o Pydantic na entrada para '/somar'
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=ve.errors()) # Levanta exce√ß√£o HTTP 422
    except Exception as e: # Captura qualquer outra exce√ß√£o inesperada
        msg_detalhe_erro = f"Erro inesperado no servidor: {str(e)}" # Monta mensagem de erro detalhada
        logger_app.critical(f"üí• Erro Cr√≠tico no Servidor: {msg_detalhe_erro} - {detalhes_requisicao}", exc_info=True, extra={'log_record_json': {"erro_servidor": msg_detalhe_erro, "exception": str(e)}}) # ü™µ Log cr√≠tico: erro interno do servidor para '/somar'
        return JSONResponse(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content={"erro": "Erro interno do servidor", "detalhes": msg_detalhe_erro}) # Retorna resposta JSON com erro 500

@app.post("/calcular_media", tags=["matem√°tica_segura"], summary="Calcula a m√©dia de um vetor de n√∫meros inteiros", description="Endpoint PROTEGIDO que calcula a m√©dia de uma lista de n√∫meros inteiros fornecida. Requer token JWT de administrador v√°lido.", dependencies=[Depends(obter_usuario_atual_jwt)], response_model=MediaResponse, response_class=JSONResponse)
async def calcular_media_vetor(request: Request, numeros_entrada: NumerosEntrada, usuario: dict = Depends(obter_usuario_atual_jwt)): # ‚ûó Rota para calcular m√©dia vetor (PROTEGIDA) - /calcular_media
    """
    Endpoint protegido para calcular a m√©dia de uma lista de n√∫meros inteiros.
    Requer um token JWT v√°lido de administrador para ser acessado.

    Args:
        request (Request): Objeto Request do FastAPI para informa√ß√µes sobre a requisi√ß√£o.
        numeros_entrada (NumerosEntrada): Objeto Pydantic contendo a lista de n√∫meros para calcular a m√©dia no campo 'numeros'.
        usuario (dict): Payload do token JWT do usu√°rio autenticado, injetado pela depend√™ncia 'obter_usuario_atual_jwt'.

    Returns:
        MediaResponse: Objeto Pydantic contendo a m√©dia calculada, mensagem de sucesso e informa√ß√µes da requisi√ß√£o.

    Raises:
        HTTPException:
            - 422 UNPROCESSABLE_ENTITY: Se houver erro de valida√ß√£o nos dados de entrada.
            - 400 BAD_REQUEST: Se houver erro de tipo de dados na biblioteca de c√°lculo.
            - 500 INTERNAL_SERVER_ERROR: Em caso de erro interno no servidor.
    """
    detalhes_requisicao = f"Cliente: {request.client.host if request.client else 'desconhecido'}, URL: {request.url.path}, Usu√°rio JWT (ADMIN): {usuario.get('sub') if usuario else 'desconhecido'}, N√≠vel Acesso: {usuario.get('nivel_acesso') if usuario else 'desconhecido'}, HTTPS={request.url.scheme == 'https'}, Rate Limited=SIM" # ‚ÑπÔ∏è Detalhes da requisi√ß√£o para logs
    logger_app.info(f"‚û°Ô∏è  Requisi√ß√£o POST em '/calcular_media' (PROTEGIDO) de {detalhes_requisicao}", extra={'log_record_json': {}}) # ü™µ Log de info: requisi√ß√£o POST para '/calcular_media' recebida

    try: # Tenta executar a opera√ß√£o de c√°lculo da m√©dia
        lista_numeros = numeros_entrada.numeros # üî¢ Extrai a lista de n√∫meros do objeto Pydantic de entrada
        logger_app.debug(f"üì¶ Corpo da requisi√ß√£o JSON recebido e VALIDADO (Pydantic): {lista_numeros}", extra={'log_record_json': {"numeros_entrada": lista_numeros}}) # ü™µ Log de debug: corpo da requisi√ß√£o validado

        instancia_numeros = Numbers() # ‚ûó Instancia a classe Numbers da biblioteca 'bibliotecas.calc_numbers'
        resultado_media = instancia_numeros.calculate_average(lista_numeros) # ‚ûó Chama a fun√ß√£o 'calculate_average' para calcular a m√©dia

        if resultado_media is None: # üß™ Caso a lista de n√∫meros seja vazia, a m√©dia √© None
            return {"media": None, "mensagem": "Opera√ß√£o de m√©dia bem-sucedida para lista vazia", "numeros_entrada": lista_numeros, "usuario": usuario.get('sub'), "nivel_acesso": usuario.get('nivel_acesso')} # Retorna resposta para lista vazia
        conteudo_resposta = {"media": resultado_media, "mensagem": "Opera√ß√£o de m√©dia bem-sucedida", "numeros_entrada": lista_numeros, "usuario": usuario.get('sub'), "nivel_acesso": usuario.get('nivel_acesso')} # üí¨ Monta o conte√∫do da resposta
        logger_app.info(f"‚ûó Opera√ß√£o de m√©dia bem-sucedida. M√©dia: {resultado_media} - {detalhes_requisicao}", extra={'log_record_json': {"resultado_media": resultado_media, "usuario": usuario.get('sub'), "nivel_acesso": usuario.get('nivel_acesso')}}) # ü™µ Log de info: opera√ß√£o de m√©dia bem-sucedida
        return conteudo_resposta # Retorna a resposta com o resultado da m√©dia

    except ValueError as e_calc_value: # Captura exce√ß√£o ValueError da biblioteca de c√°lculo
        logger_app.warning(f"‚ö†Ô∏è Erro de valida√ß√£o nos dados de entrada para '/calcular_media': {e_calc_value} - {detalhes_requisicao}", extra={'log_record_json': {"erro_biblioteca": str(e_calc_value)}}) # ü™µ Log de warning: erro de valida√ß√£o na entrada para '/calcular_media'
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=str(e_calc_value)) # Levanta exce√ß√£o HTTP 422
    except TypeError as e_calc_type: # Captura exce√ß√£o TypeError da biblioteca de c√°lculo
        logger_app.error(f"üî• Erro de tipo de dados na biblioteca calc_numbers para '/calcular_media': {e_calc_type} - {detalhes_requisicao}", extra={'log_record_json': {"erro_biblioteca": str(e_calc_type)}}) # ü™µ Log de error: erro de tipo de dados na biblioteca para '/calcular_media'
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e_calc_type)) # Levanta exce√ß√£o HTTP 400
    except HTTPException as exc_http: # Captura exce√ß√µes HTTPException levantadas explicitamente
        logger_app.error(f"üî• Exce√ß√£o HTTP: {exc_http.detail} - Status Code: {exc_http.status_code} - {detalhes_requisicao}", extra={'log_record_json': {"erro_http": exc_http.detail, "status_code": exc_http.status_code}}) # ü™µ Log de error: exce√ß√£o HTTP capturada
        raise JSONResponse(status_code=exc_http.status_code, content={"erro": exc_http.detail}) # Retorna resposta JSON com erro HTTP
    except ValidationError as ve: # Captura exce√ß√µes ValidationError do Pydantic
        logger_app.warning(f"‚ö†Ô∏è Erro de Valida√ß√£o de Entrada (Pydantic): {ve.errors()} - {detalhes_requisicao}", extra={'log_record_json': {"erro_validacao": ve.errors()}}) # ü™µ Log de warning: erro de valida√ß√£o Pydantic na entrada para '/calcular_media'
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=ve.errors()) # Levanta exce√ß√£o HTTP 422
    except Exception as e: # Captura qualquer outra exce√ß√£o inesperada
        msg_detalhe_erro = f"Erro inesperado no servidor: {str(e)}" # Monta mensagem de erro detalhada
        logger_app.critical(f"üí• Erro Cr√≠tico no Servidor: {msg_detalhe_erro} - {detalhes_requisicao}", exc_info=True, extra={'log_record_json': {"erro_servidor": msg_detalhe_erro, "exception": str(e)}}) # ü™µ Log cr√≠tico: erro interno do servidor para '/calcular_media'
        return JSONResponse(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content={"erro": "Erro interno do servidor", "detalhes": msg_detalhe_erro}) # Retorna resposta JSON com erro 500

# ü©∫ Endpoint de Sa√∫de da API (P√öBLICO - Sem Autentica√ß√£o)

@app.get("/saude", tags=["sistema_seguro"], summary="Verifica a sa√∫de da API", description="Endpoint P√öBLICO para verificar se a API est√° online e funcionando corretamente.", response_class=JSONResponse, response_model=SaudeResponse)
async def verificar_saude_segura(): # ü©∫ Rota de sa√∫de da API (P√öBLICA) - /saude
    """
    Endpoint p√∫blico para verificar a sa√∫de e o status da API.
    N√£o requer autentica√ß√£o e pode ser acessado por qualquer cliente.
    Retorna informa√ß√µes sobre o status operacional da API, vers√£o, ambiente, etc.

    Returns:
        SaudeResponse: Objeto Pydantic contendo o 'status' da API ('OK' para operacional) e uma 'mensagem' informativa.
    """
    timestamp = datetime.now().isoformat() # üïí Obt√©m o timestamp atual em formato ISO 8601
    saude_template = { # ü©∫ Template para a resposta de sa√∫de da API
        "status": "OK", # ‚úÖ Status da API (OK = operacional)
        "version": "0.9.3", # üìå Vers√£o da API
        "ambiente": os.environ.get("API_ENVIRONMENT", "Desenvolvimento"), # üåç Ambiente da API (e.g., 'Desenvolvimento', 'Produ√ß√£o')
        "timestamp": timestamp, # üïí Timestamp da verifica√ß√£o de sa√∫de
        "mensagem": "API Matem√°tica Segura est√° operacional e respondendo.", # üí¨ Mensagem de sa√∫de geral
        "detalhes": { # ‚ÑπÔ∏è Detalhes t√©cnicos sobre a API
            "servidor": "FastAPI", # ‚öôÔ∏è Framework utilizado: FastAPI
            "seguranca": "JWT, HTTPS, Rate Limiting", # üõ°Ô∏è Mecanismos de seguran√ßa implementados
            "logs": "Detalhado em JSON" # ü™µ Formato dos logs: JSON detalhado
        },
        "status_code": 200, # üö¶ C√≥digo de status HTTP: 200 OK
        "emoji_status": "üöÄ", # üöÄ Emoji representando o status saud√°vel da API
        "indicador_saude": "üíö √ìtimo" # üíö Indicador visual de sa√∫de: √ìtimo
    }
    return saude_template # Retorna o template de sa√∫de como resposta JSON

# ‚öôÔ∏è Execu√ß√£o do Servidor Uvicorn (HTTPS)
if __name__ == "__main__":
    import uvicorn

    # üîë Cria diret√≥rio para credenciais e certificados se n√£o existirem
    os.makedirs(CREDENTIALS_DIR, exist_ok=True)
    CERT_FILE = os.path.join(CREDENTIALS_DIR, "certificado.pem") # üîë Caminho para o arquivo de certificado HTTPS
    KEY_FILE = os.path.join(CREDENTIALS_DIR, "chave.pem") # üîë Caminho para o arquivo de chave privada HTTPS
    ADMIN_CREDENTIALS_FILE = os.path.join(CREDENTIALS_DIR, "admin_credentials.json") # ‚öôÔ∏è Caminho para o arquivo de credenciais de admin
    TESTER_CREDENTIALS_FILE = os.path.join(CREDENTIALS_DIR, "tester_credentials.json") # ‚öôÔ∏è Caminho para o arquivo de credenciais de tester

    # üîë Gera certificados autoassinados HTTPS se n√£o existirem (para desenvolvimento local)
    if not os.path.exists(CERT_FILE) or not os.path.exists(KEY_FILE): # ‚úÖ Verifica se os arquivos de certificado e chave n√£o existem
        logger_app.info("üîë Gerando certificados autoassinados para HTTPS...", extra={'log_record_json': {"acao": "geracao_certificados_https"}}) # ü™µ Log de info: gera√ß√£o de certificados HTTPS iniciada
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend()) # üîë Gera chave privada RSA
        subject = x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, "localhost")]) # üîë Define o Subject do certificado (localhost)
        builder = x509.CertificateBuilder().subject_name(subject).issuer_name(subject).public_key(private_key.public_key()).serial_number(x509.random_serial_number()).not_valid_before(datetime.utcnow()).not_valid_after(datetime.utcnow() + timedelta(days=365)).add_extension(x509.SubjectAlternativeName([x509.DNSName("localhost")]), critical=False) # üîë Builder do certificado X.509
        certificate = builder.sign(private_key, hashes.SHA256(), default_backend()) # üîë Assina o certificado com a chave privada
        with open(KEY_FILE, "wb") as key_f: # üîë Salva a chave privada no arquivo 'chave.pem'
            key_f.write(private_key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()))
        with open(CERT_FILE, "wb") as cert_f: # üîë Salva o certificado no arquivo 'certificado.pem'
            cert_f.write(certificate.public_bytes(serialization.Encoding.PEM))
        logger_app.info(f"üîë Certificados autoassinados gerados e salvos em: '{CREDENTIALS_DIR}/'", extra={'log_record_json': {"acao": "certificados_salvos", "diretorio": CREDENTIALS_DIR}}) # ü™µ Log de info: certificados HTTPS gerados e salvos
    else: # Se os certificados j√° existirem
        logger_app.info(f"üîë Certificados HTTPS autoassinados j√° existentes em: '{CREDENTIALS_DIR}/'. Usando existentes.", extra={'log_record_json': {"acao": "certificados_existentes", "diretorio": CREDENTIALS_DIR}}) # ü™µ Log de info: certificados HTTPS existentes sendo usados

    # ‚öôÔ∏è Cria arquivos de credenciais padr√£o (admin/admin, tester/tester) se n√£o existirem (para desenvolvimento local)
    if not os.path.exists(ADMIN_CREDENTIALS_FILE): # ‚úÖ Verifica se o arquivo de credenciais admin n√£o existe
        logger_app.info(f"‚öôÔ∏è  Criando arquivo de credenciais admin padr√£o: '{ADMIN_CREDENTIALS_FILE}'...", extra={'log_record_json': {"acao": "criacao_creds_admin", "arquivo": ADMIN_CREDENTIALS_FILE}}) # ü™µ Log de info: cria√ß√£o de credenciais ADMIN iniciada
        admin_creds = {"username": "admin", "password": "admin"} # ‚öôÔ∏è Credenciais padr√£o admin
        with open(ADMIN_CREDENTIALS_FILE, "w", encoding='utf-8') as f: # ‚öôÔ∏è Salva as credenciais admin no arquivo 'admin_credentials.json'
            json.dump(admin_creds, f, indent=4, ensure_ascii=False)
        logger_app.info(f"‚öôÔ∏è  Arquivo de credenciais admin padr√£o criado.", extra={'log_record_json': {"acao": "creds_admin_criadas_sucesso", "arquivo": ADMIN_CREDENTIALS_FILE}}) # ü™µ Log de info: credenciais ADMIN criadas com sucesso
    else: # Se o arquivo de credenciais admin j√° existir
        logger_app.info(f"‚öôÔ∏è  Arquivo de credenciais admin j√° existente: '{ADMIN_CREDENTIALS_FILE}'. Usando existente.", extra={'log_record_json': {"acao": "creds_admin_existentes", "arquivo": ADMIN_CREDENTIALS_FILE}}) # ü™µ Log de info: credenciais ADMIN existentes sendo usadas

    if not os.path.exists(TESTER_CREDENTIALS_FILE): # ‚úÖ Verifica se o arquivo de credenciais tester n√£o existe
        logger_app.info(f"‚öôÔ∏è  Criando arquivo de credenciais tester padr√£o: '{TESTER_CREDENTIALS_FILE}'...", extra={'log_record_json': {"acao": "criacao_creds_tester", "arquivo": TESTER_CREDENTIALS_FILE}}) # ü™µ Log de info: cria√ß√£o de credenciais TESTER iniciada
        tester_creds = {"username": "tester", "password": "tester"} # ‚öôÔ∏è Credenciais padr√£o tester
        with open(TESTER_CREDENTIALS_FILE, "w", encoding='utf-8') as f: # ‚öôÔ∏è Salva as credenciais tester no arquivo 'tester_credentials.json'
            json.dump(tester_creds, f, indent=4, ensure_ascii=False)
        logger_app.info(f"‚öôÔ∏è  Arquivo de credenciais tester padr√£o criado.", extra={'log_record_json': {"acao": "creds_tester_criadas_sucesso", "arquivo": TESTER_CREDENTIALS_FILE}}) # ü™µ Log de info: credenciais TESTER criadas com sucesso
    else: # Se o arquivo de credenciais tester j√° existir
        logger_app.info(f"‚öôÔ∏è  Arquivo de credenciais tester j√° existente: '{TESTER_CREDENTIALS_FILE}'. Usando existente.", extra={'log_record_json': {"acao": "creds_tester_existentes", "arquivo": TESTER_CREDENTIALS_FILE}}) # ü™µ Log de info: credenciais TESTER existentes sendo usadas

    # üöÄ Inicia o servidor Uvicorn com HTTPS e documenta√ß√£o Swagger/ReDoc AUTOM√ÅTICA no /docs e /redoc
    print("‚úÖ Servidor FastAPI inicializado. ")
    print("‚û°Ô∏è  Acesse a documenta√ß√£o interativa Swagger UI em: https://localhost:8882/docs") # üìñ Instru√ß√µes Swagger UI
    print("‚û°Ô∏è  Acesse a documenta√ß√£o alternativa ReDoc em: https://localhost:8882/redoc") # üìö Instru√ß√µes ReDoc
    uvicorn.run(app, host="0.0.0.0", port=8882, ssl_certfile=CERT_FILE, ssl_keyfile=KEY_FILE) # üöÄ Inicia o servidor Uvicorn com HTTPS